@startuml uml

' Definizione delle classi principali

class Board {
    - grid: list[list[Piece | None]]
    + __init__()
    + setup_board()
    + __print_board()
    + get_piece_moves(row: int, col: int): list
    + move_piece(start_row: int, start_col: int, end_row: int, end_col: int)
    + is_checkmate(color: str): bool
    + find_king(color: str): tuple
    + is_in_check(color: str, king_pos: tuple): bool
    + simulate_move(start_row: int, start_col: int, end_row: int, end_col: int, color: str): bool
}

abstract class Piece {
    - color: str
    + __init__(color: str)
    + get_color(): str
    + get_moves(board: list[list[Piece | None]], row: int, col: int): list
    + get_type(): str
}

class King {
    + get_moves(board: list[list[Piece | None]], row: int, col: int): list
    + get_type(): str
}

class Queen {
    + get_moves(board: list[list[Piece | None]], row: int, col: int): list
    + get_type(): str
}

class Bishop {
    + get_moves(board: list[list[Piece | None]], row: int, col: int): list
    + get_type(): str
}

class Horse {
    + get_moves(board: list[list[Piece | None]], row: int, col: int): list
    + get_type(): str
}

class Rook {
    + get_moves(board: list[list[Piece | None]], row: int, col: int): list
    + get_type(): str
}

class Pawn {
    + get_moves(board: list[list[Piece | None]], row: int, col: int): list
    + get_type(): str
}

abstract class Player {
    - color: str
    + __init__(color: str)
    + get_move(board: Board): tuple
}

class HumanPlayer {
    - selected_piece: Piece | None
    - possible_moves: list
    - move_made: bool
    - move: tuple | None
    + __init__(color: str)
    + handle_event(event, board: Board)
}

class AIPlayer {
    - depth: int
    + __init__(color: str, depth: int)
    + get_move(board: Board): tuple
    + minimax(board: Board, depth: int, alpha: float, beta: float, is_maximizing: bool): float
    + is_terminal(board: Board): bool
    + evaluate_board(board: Board): float
}

' Relazioni di ereditariet√†

Piece <|-- King
Piece <|-- Queen
Piece <|-- Bishop
Piece <|-- Horse
Piece <|-- Rook
Piece <|-- Pawn

Player <|-- HumanPlayer
Player <|-- AIPlayer

' Relazioni di associazione

Board "1" *-- "0..64" Piece : contains

Player "1" --> "1" Board : interacts with

@enduml
